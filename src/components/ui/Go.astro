---
import type { HTMLAttributes, CSSProperty } from 'astro/types'

type Variants = 'primary' | 'secondary' | 'error' | 'light' | 'dark' | 'success'
type Direction = 'up' | 'up-right' | 'right' | 'down-right' | 'down' | 'down-left' | 'left' | 'up-left'
type Sizes = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl'

interface Props extends HTMLAttributes<'a'> {
  direction?: Direction;
  reverse?: boolean;
  text?: string;
  size?: Sizes;
  variant?: Variants;
  href?: string;
  style?: CSSProperty
}

const {
  direction = 'right',
  reverse = false,
  variant = 'primary',
  text,
  size = 'md',
  href,
  ...rest
} = Astro.props

const circleSizes = {
  xs: 'h-6 w-6',
  sm: 'h-7 w-7',
  md: 'h-8 w-8',
  lg: 'h-9 w-9',
  xl: 'h-10 w-10',
  '2xl': 'h-11 w-11',
  '3xl': 'h-12 w-12',
  '4xl': 'h-16 w-16',
  '5xl': 'h-20 w-20'
}

const arrowSizes = {
  xs: 'h-4 w-4',
  sm: 'h-4 w-4',
  md: 'h-5 w-5',
  lg: 'h-6 w-6',
  xl: 'h-7 w-7',
  '2xl': 'h-8 w-8',
  '3xl': 'h-10 w-10',
  '4xl': 'h-11 w-11',
  '5xl': 'h-12 w-12'
}
---

<a
  href={href}
  class='astroui-go'
  class:list={[
    reverse && 'astroui-go-reverse',
    `astroui-go-${variant}`,
    rest.class
  ]}
  {...rest}
>
  {text && (
    <span
      class:list={[
        'font-medium',

        size === 'xs' && 'text-xs',
        size === 'sm' && 'text-sm',
        size === 'md' && 'text-base',
        size === 'lg' && 'text-lg',
        size === 'xl' && 'text-lg',
        size === '2xl' && 'text-lg',
        size === '3xl' && 'text-xl',
        size === '4xl' && 'text-2xl',
        size === '5xl' && 'text-3xl'
      ]}
    >
      {text}
    </span>
  )}
  <div
    class='relative inline-flex flex-none items-center justify-center'
    class:list={[
      circleSizes[size]
    ]}
  >
    <div class='astroui-go-circle-content'>
      <svg
        class:list={[
          circleSizes[size]
        ]}
        viewBox='0 0 60 60'
      >
        <circle stroke='currentColor' stroke-width='2' fill='transparent' r='28' cx='30' cy='30'></circle>
        <circle class='astroui-circle' stroke='currentColor' stroke-width='2' fill='transparent' r='28' cx='30' cy='30' style='stroke-dasharray: 175.929, 175.929; transform: rotate(-90deg); transform-origin: 30px 30px;' stroke-dashoffset='175.92918860102841' transform-origin='30px 30px'></circle>
      </svg>
    </div>
    <span style='transform: none;'>
      <svg
        class='transform'
        class:list={[
          'astroui-go-text',
          direction === 'up' && 'rotate-180',
          direction === 'up-right' && 'rotate-[225deg]',
          direction === 'up-left' && 'rotate-[-225deg]',
          direction === 'down' && 'rotate-[360deg]',
          direction === 'down-right' && 'rotate-[-45deg]',
          direction === 'down-left' && 'rotate-[45deg]',
          direction === 'right' && '-rotate-90',
          direction === 'left' && 'rotate-[90deg]',

          arrowSizes[size]

        ]}
        viewBox='0 0 32 32'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
      >
        <path fill-rule='evenodd' clip-rule='evenodd' d='M15.101 5.5V23.1094L9.40108 17.4095L8.14807 18.6619L15.9862 26.5L23.852 18.6342L22.5996 17.3817L16.8725 23.1094V5.5H15.101Z' fill='currentColor'></path>
      </svg>
    </span>
  </div>
</a>

<style is:global>

  .astroui-go {
    --astroui-go-color: theme(colors.primary);
    --astroui-go-color-hover: theme(colors.primary);
    --astroui-go-color-hover-text: theme(colors.primary);
    --astroui-go-circle-color: theme(colors.gray[200]);

    @apply text-gray-800 hover:text-primary inline-flex items-center text-left font-medium focus:outline-none cursor-pointer transition gap-4 dark:text-gray-200;
  }
  .astroui-go:hover .astroui-circle {
    stroke-dashoffset: 0;
  }

  /** Circle content */

  .astroui-go .astroui-go-circle-content {
    @apply absolute text-[var(--astroui-go-circle-color)] dark:text-gray-600;
  }

  /** Reverse */

  .astroui-go.astroui-go-reverse {
    @apply flex-row-reverse;
  }

  .astroui-go {
    @apply dark:hover:text-white
  }
  .astroui-go:hover .astroui-circle {
    @apply stroke-[var(--astroui-go-color-hover)] dark:stroke-white;
  }

  .astroui-go:hover .astroui-go-text {
    @apply text-[var(--astroui-go-color-hover-text)] dark:text-white;
  }

  .astroui-go .astroui-circle {
    @apply stroke-current;
    stroke-dasharray: 175.929, 175.929;
    stroke-dashoffset: 175.92918860102841;
    transition: stroke-dashoffset 0.3s ease 0s, stroke 0.3s ease 0s;
  }

  /** Variants */

  .astroui-go.astroui-go-primary {
    --astroui-go-color: theme(colors.primary);
    --astroui-go-color-hover: theme(colors.primary);
    --astroui-go-color-hover-text: theme(colors.primary);
    @apply hover:text-primary;
  }

  .astroui-go.astroui-go-secondary {
    --astroui-go-color: theme(colors.gray[500]);
    --astroui-go-color-hover: theme(colors.gray[500]);
    --astroui-go-color-hover-text: theme(colors.gray[500]);
    @apply hover:text-gray-500;
  }

  .astroui-go.astroui-go-error {
    --astroui-go-color: theme(colors.error);
    --astroui-go-color-hover: theme(colors.error);
    --astroui-go-color-hover-text: theme(colors.error);
    @apply hover:text-error;
  }

  .astroui-go.astroui-go-light {
    --astroui-go-color-hover: theme(colors.white);
    --astroui-go-color-hover-text: theme(colors.white);
    --astroui-go-circle-color: theme(colors.gray[600]);
    @apply text-gray-500 hover:text-white;
  }

  .astroui-go.astroui-go-dark {
    --astroui-go-color: theme(colors.black);
    --astroui-go-color-hover: theme(colors.black);
    --astroui-go-color-hover-text: theme(colors.black);
    @apply hover:text-black;
  }

  .astroui-go.astroui-go-success {
    --astroui-go-color: theme(colors.success);
    --astroui-go-color-hover: theme(colors.success);
    --astroui-go-color-hover-text: theme(colors.success);
    @apply hover:text-success;
  }

</style>