---
import type { HTMLAttributes } from 'astro/types'

interface Props extends HTMLAttributes<'div'> {
  id: string
  initialOpen?: boolean
  placement?: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'
  border?: boolean
}

const {
  id,
  initialOpen = false,
  placement = 'top',
  border = false
} = Astro.props
---

<div
  class='astroui-popover fade'
  id={id}
  role='dialog'
  aria-hidden={initialOpen ? 'false' : 'true'}
  data-placement={placement}
  class:list={{
    'astroui-popover-show': initialOpen
  }}
  style={{
    display: initialOpen ? 'block' : 'none'
  }}
  transition:animate='fade'
>
  <article
    class='astroui-popover-content'
    class:list={{
      'astroui-popover-border': border
    }}
    transition:animate='fade'
  >
    <slot name='content'>
      <header class='astroui-popover-header'>
        <slot name='title'></slot>
        <button type='button' class='astroui-popover-close' data-dismiss='popover' aria-label='Close'>
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='22'
            height='22'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'>
            <line x1='18' y1='6' x2='6' y2='18'></line>
            <line x1='6' y1='6' x2='18' y2='18'></line>
          </svg>
        </button>
      </header>
      <main class='astroui-popover-body'>
        <slot name='body'></slot>
      </main>
      <footer class='astroui-popover-footer'>
        <slot name='footer'></slot>
      </footer>
    </slot>
  </article>
</div>

<script define:vars={{ id, initialOpen }}>
  const popover = document.querySelectorAll(`#${id}`)
  const trigger = document.querySelectorAll(`[data-toggle="${id}"]`)

  //
  // Check if the popover is open

  function isShow (popover) {
    return popover.getAttribute('aria-hidden') === 'false'
  }

  //
  // Show the popover

  function getShow (popover) {
    popover.style.display = 'block'
    popover.setAttribute('aria-hidden', 'false')
    popover.classList.add('astroui-popover-show')
  }

  //
  // Hide the popover

  function getHide (popover) {
    popover.classList.remove('astroui-popover-show')
    popover.setAttribute('aria-hidden', 'true')
    popover.style.display = 'none'
  }

  //
  // Toggle the popover

  function getToggle (popover) {
    if (isShow(popover)) {
      getHide(popover)
    } else {
      getShow(popover)
    }
  }

  //
  // Function on dismissing popover by button close

  function onDismiss (popover) {
    const closeButton = popover?.querySelector('[data-dismiss="popover"]') ?? null
    closeButton?.addEventListener('click', () => {
      getHide(popover)
    })
  }

  //
  // Get placement

  function getPlacement (popover) {
    const trigger = document.querySelector(`[data-toggle="${popover.id}"]`)
    const top = trigger?.offsetTop
    const left = trigger?.offsetLeft
    const triggerWidth = trigger?.offsetWidth
    const triggerHeight = trigger?.offsetHeight
    const popoverWidth = popover?.offsetWidth
    const popoverHeight = popover?.offsetHeight
    const placement = popover?.dataset.placement || 'top'

    const gap = 5

    const position = {
      top,
      left
    }

    if (placement === 'top') {
      position.top = top - popoverHeight - gap
      position.left = left + triggerWidth / 2 - popoverWidth / 2
    }

    if (placement === 'top-start') {
      position.top = top - popoverHeight - gap
      position.left = left
    }

    if (placement === 'top-end') {
      position.top = top - popoverHeight - gap
      position.left = left + triggerWidth - popoverWidth
    }

    if (placement === 'bottom') {
      position.top = top + triggerHeight + gap
      position.left = left + triggerWidth / 2 - popoverWidth / 2
    }

    if (placement === 'bottom-start') {
      position.top = top + triggerHeight + gap
      position.left = left
    }

    if (placement === 'bottom-end') {
      position.top = top + triggerHeight + gap
      position.left = left + triggerWidth - popoverWidth
    }

    if (placement === 'left') {
      position.top = top + triggerHeight / 2 - popoverHeight / 2
      position.left = left - popoverWidth - gap
    }

    if (placement === 'left-start') {
      position.top = top
      position.left = left - popoverWidth - gap
    }

    if (placement === 'left-end') {
      position.top = top + triggerHeight - popoverHeight
      position.left = left - popoverWidth - gap
    }

    if (placement === 'right') {
      position.top = top + triggerHeight / 2 - popoverHeight / 2
      position.left = left + triggerWidth + gap
    }

    if (placement === 'right-start') {
      position.top = top
      position.left = left + triggerWidth + gap
    }

    if (placement === 'right-end') {
      position.top = top + triggerHeight - popoverHeight
      position.left = left + triggerWidth + gap
    }

    popover.style.transform = `translate3d(${position.left}px, ${position.top}px, 0)`
    popover.style.inset = '0px auto auto 0px'
  }

  //
  // Initial states

  popover.forEach((popover) => {
    if (initialOpen) {
      popover.style.display = 'block'
      popover.setAttribute('aria-hidden', 'false')
      popover.classList.add('astroui-popover-show')
      getPlacement(popover)
    } else {
      popover.style.display = 'none'
      popover.setAttribute('aria-hidden', 'true')
      popover.classList.remove('astroui-popover-show')
    }

    onDismiss(popover)
  })

  //
  // Hide the popover when pressing the escape key

  function hideOnEscKey (popover) {
    const escKeyListener = (event) => {
      if (event.key === 'Escape' && isShow(popover)) {
        getHide(popover)
        removeKeyListener()
      }
    }

    const removeKeyListener = () => {
      document.removeEventListener('keydown', escKeyListener)
    }

    document.addEventListener('keydown', escKeyListener)
  }

  //
  // Hide the popover when clicking the close button

  function hideOnCloseButton (popover) {
    const closeButton = popover?.querySelector('[data-dismiss="popover"]') ?? null

    closeButton?.addEventListener('click', () => {
      getHide(popover)
    })
  }

  //
  // Hide the popover when clicking outside

  function hideOnOutsideClick (popover, trigger, event) {
    if (!popover?.contains(event.target) && !trigger?.contains(event.target) && isShow(popover)) {
      getHide(popover)
    }
  }

  document.addEventListener('click', (event) => {
    popover.forEach((popover) => {
      const trigger = document.querySelector(`[data-toggle="${popover.id}"]`)
      hideOnOutsideClick(popover, trigger, event)
    })
  })

  //
  // Event listeners

  trigger.forEach((trigger) => {
    const popover = document.querySelector(`#${trigger.dataset.toggle}`)
    const element = document.querySelector(`[data-toggle="${popover.id}"]`)
    element.addEventListener('click', () => {
      getToggle(popover)
      hideOnEscKey(popover)
      hideOnCloseButton(popover)
      getPlacement(popover)
    })
  })
</script>

<style is:global>

  .astroui-popover {
    @apply absolute z-[100] max-w-max;
  }

  /** Popover content */

  .astroui-popover .astroui-popover-content {
    @apply flex flex-col relative bg-clip-padding rounded-xl bg-white shadow-2xl max-w-[18rem] animate-popover dark:bg-gray-800;
  }
  .astroui-popover.fade .astroui-popover-content{
    @apply opacity-0 invisible;
  }
  .astroui-popover.astroui-popover-show .astroui-popover-content{
    @apply opacity-100 visible;
  }

  /** Popover border */
  .astroui-popover-content.astroui-popover-border {
    @apply divide-y divide-gray-200 dark:divide-gray-700;
  }

  /** Popover header */
  .astroui-popover .astroui-popover-header {
    @apply flex items-start justify-between px-4 py-3;
  }

  .astroui-popover .astroui-popover-title {
    @apply mb-0 leading-normal text-lg font-semibold max-w-[calc(100%_-_2rem)];
  }

  /** Popover body */
  .astroui-popover .astroui-popover-body {
    @apply px-4 py-3;
  }

  /** Popover footer */
  .astroui-popover .astroui-popover-footer {
    @apply flex items-center justify-end px-4 py-3;
  }

  /** Popover close button */
  .astroui-popover .astroui-popover-close {
    @apply flex items-center justify-center w-8 h-8 rounded-full bg-transparent text-black cursor-pointer transition-all dark:text-gray-400 dark:hover:text-gray-200 dark:hover:bg-white/5;
  }

</style>