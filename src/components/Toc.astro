---
const url = Astro.url.pathname.split('/')
const path = url[url.length - 1]
const file = path.split('.')[0]
const component = await Astro.glob('../pages/components/*.mdx')
const headings = component.filter(c => c.url?.includes(file))

const h = headings.map(heading => {
  return heading.getHeadings().map(h => {
    return {
      slug: h.slug,
      text: h.text,
      tag: `h${h.depth}`
    }
  })
}).flat()

---

<script >
  const tocContent = document?.querySelector('.toc-content')

  tocContent?.querySelectorAll('a').forEach(a => {
    a.addEventListener('click', event => {
      event.preventDefault()
      const el = document.querySelector(`#${a.hash.slice(1)}`)
      if (el) {
        el.scrollIntoView({ behavior: 'smooth' })
      }

      // Toggle class 'toc-active' no item do TOC

      const tocItems = document.querySelectorAll('.toc-content a')
      tocItems.forEach(item => {
        item.classList.remove('toc-active')
      })
      a.classList.add('toc-active')
    })
  })

  const headings = Array.from(document.querySelectorAll('h2[id], h3[id], h4[id], h5[id], h6[id]')).map(heading => {
    const slug = heading.id
    const text = heading.textContent
    const tag = heading.tagName.toLowerCase()
    heading.classList.add('toc-heading')
    return { slug, text, tag }
  })

  window.addEventListener('DOMContentLoaded', () => {
    headings.forEach(heading => {
      const el = document.querySelector(`#${heading.slug}`)
      if (el) {
        const anchor = document.createElement('a')
        anchor.href = `#${heading.slug}`
        anchor.addEventListener('click', event => {
          event.preventDefault()
          const el = document.querySelector(`#${heading.slug}`)
          if (el) {
            el.scrollIntoView({ behavior: 'smooth' })
          }
        })
        anchor.classList.add('toc-heading-anchor')
        anchor.textContent = '#'
        anchor.ariaLabel = 'anchor'
        el.appendChild(anchor)
      }
    })

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id')
        const tocItem = document.querySelector(`.toc-content a[href="#${id}"]`)
        if (entry.isIntersecting) {
          tocItem?.classList.add('toc-active')
        } else {
          tocItem?.classList.remove('toc-active')
        }
      })
    }, {
      rootMargin: '0px 0px -80% 0px'
    })

    headings.forEach(heading => {
      const el = document.querySelector(`#${heading.slug}`)
      if (el) {
        observer.observe(el)
      }
    })
  })

  // console.log(headings)

  /*

  Toc pure javascript ðŸ‘‡

  const headings = Array.from(document.querySelectorAll('h2[id], h3[id], h4[id], h5[id], h6[id]')).map(heading => {
    const slug = heading.id
    const text = heading.textContent
    const tag = heading.tagName.toLowerCase()
    heading.classList.add('toc-heading')
    return { slug, text, tag }
  })

  headings.forEach(heading => {
    const el = document.querySelector(`#${heading.slug}`)
    if (el) {
      const anchor = document.createElement('a')
      anchor.href = `#${heading.slug}`
      anchor.addEventListener('click', event => {
        event.preventDefault()
        const el = document.querySelector(`#${heading.slug}`)
        if (el) {
          el.scrollIntoView({ behavior: 'smooth' })
        }
      })
      anchor.classList.add('toc-heading-anchor')
      anchor.textContent = '#'
      anchor.ariaLabel = 'anchor'
      el.appendChild(anchor)
    }
  })

  const toc = document.querySelector('.toc-content')
  headings.forEach(heading => {
    const li = document.createElement('li')
    const a = document.createElement('a')
    a.href = `#${heading.slug}`
    a.addEventListener('click', event => {
      event.preventDefault()
      const el = document.querySelector(`#${heading.slug}`)
      if (el) {
        el.scrollIntoView({ behavior: 'smooth' })
      }
    })
    a.textContent = heading.text
    li.appendChild(a)
    toc?.appendChild(li)

    if (heading.tag === 'h2') {
      li.classList.add('ml-0')
    } else if (heading.tag === 'h3') {
      li.classList.add('ml-4')
    } else if (heading.tag === 'h4') {
      li.classList.add('ml-8')
    } else if (heading.tag === 'h5') {
      li.classList.add('ml-12')
    } else if (heading.tag === 'h6') {
      li.classList.add('ml-16')
    }
  })

  // Obrserva o scroll da pÃ¡gina e adiciona a classe 'toc-active' no item do TOC

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const id = entry.target.getAttribute('id')
      const tocItem = document.querySelector(`.toc-content a[href="#${id}"]`)
      if (entry.isIntersecting) {
        tocItem?.classList.add('toc-active')
      } else {
        tocItem?.classList.remove('toc-active')
      }
    })
  }, {
    rootMargin: '0px 0px -80% 0px'
  })

  headings.forEach(heading => {
    const el = document.querySelector(`#${heading.slug}`)
    if (el) {
      observer.observe(el)
    }
  }) */
</script>

<!--
  Toc pure javascript

<div class='toc' >
  <ul class='toc-content flex flex-col mt-24' />
</div>
-->

<div class='toc'>
  <ul class='toc-content flex flex-col mt-24'>
    {h.map(heading => (
      <li
        class:list={[
          'toc-heading',
          heading.tag === 'h2' && 'ml-0',
          heading.tag === 'h3' && 'ml-4',
          heading.tag === 'h4' && 'ml-8',
          heading.tag === 'h5' && 'ml-12',
          heading.tag === 'h6' && 'ml-16'
        ]}
      >
        <a href={`#${heading.slug}`}>
          {heading.text}
        </a>
      </li>
    ))}
  </ul>
</div>

<style is:inline>

  /** Headings */

  .toc-heading {
    display: flex;
    align-items: center;
    width: 100%;
  }
  .toc-heading:hover .toc-heading-anchor {
    opacity: 1;
  }

  .toc-heading-anchor {
    display: block;
    color: #5717ed;
    text-decoration: none;
    transition: color 0.2s;
    outline: transparent solid 2px;
    outline-offset: 2px;
    opacity: 0;
    margin-left: 0.375rem;
  }

  /** Toc */

  .toc-content {
    padding: 0;
    margin: 0;
    list-style: none;
  }
  .toc-content::-webkit-scrollbar {
    width: 0.5rem;
  }
  .toc-content::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  .toc-content::-webkit-scrollbar-thumb {
    background: #888;
  }
  .toc-content::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
  .toc-content a {
    display: block;
    padding: 0.5rem 0;
    color: #555;
    text-decoration: none;
    transition: color 0.2s;
  }
  .dark .toc-content a {
    --tw-text-opacity: 1;
    color: rgb(107 114 128 / var(--tw-text-opacity));
  }
  .toc-content a:hover {
    --tw-text-opacity: 1;
    color: rgb(156 163 175 / var(--tw-text-opacity));
  }
  .dark .toc-content a:hover {
    color: theme(colors.gray.100);
  }
  .toc-content a.toc-active {
    color: #0a0318;
    font-weight: bold;
  }
  .dark .toc-content a.toc-active {
    color: #fff;
  }

</style>
